{"version":3,"sources":["model.js","index.js"],"names":["cache","persist","notify","localStorage","setItem","removeItem","error","console","warn","suppe","Model","data","id","Error","Object","assign","constructor","prototype","modelName","name","updates","Proxy","get","target","property","receiver","Reflect","set","value","frozen","length","update","cached","_cached","now","Date","toISOString","instance","updated","created","_id","callback","push","_cache","JSON","stringify","query","instances","queryType","stored","parse","getItem","isPropertiesQuery","isArrayOfIds","Array","matches","match","options","count","i","key","slice"],"mappings":"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","file":"index.map","sourceRoot":"../src/js","sourcesContent":["// Variables:\nlet cache = {}\nlet persist = true\nlet notify = {}\n\ntry {\n  localStorage.setItem('tdmnco-model-js', {})\n  localStorage.removeItem('tdmnco-model-js')\n} catch(error) {\n  console.warn('Model.js: localStorage not supported!', error)\n\n  persist = false\n}\n\nvar suppe = 'lim';\n\n// Classes:\nclass Model {\n  constructor(data) {\n    if (!data.id) {\n      throw new Error('Model.js: cannot create instance without an id!')\n    }\n\n    Object.assign(this, data)\n\n    let id = (this.constructor.prototype.modelName || this.constructor.name) + '-' + this.id\n\n    notify[id] = {\n      updates: []\n    }\n\n    return new Proxy(this, {\n      get(target, property, receiver) {\n\t\t\t\treturn Reflect.get(target, property, receiver);\n      },\n\n      set(target, property, value) {\n        if (!target.frozen()) {\n          let updates = notify[id].updates\n\n          if (updates.length) {\n            for (let update of updates) {\n              update(property, target[property], value)\n            }\n          }\n\n          Reflect.set(target, property, value)\n        }\n\n        return true\n      }\n    })\n  }\n\n  // Static functions:\n  static first(query) {\n    return this.get(query)[0]\n  }\n\n  static get(query) {\n    if (!query) {\n      let instances = []\n\n      for (let id in cache) {\n        instances.push(cache[id].instance)\n      }\n\n      return instances\n    }\n\n    let queryType = typeof query\n\n    if (queryType === 'string') {\n      let id = (this.prototype.modelName || this.prototype.constructor.name) + '-' + query\n      let cached = cache[id]\n\n      if (cached) {\n        return cached.instance\n      }\n\n      if (!cached && persist) {\n        let stored = JSON.parse(localStorage.getItem(id))\n\n        if (stored && stored.id) {\n          return new this(stored)\n        }\n      }\n\n      return null\n    }\n\n    let isPropertiesQuery = query instanceof Object\n    let isArrayOfIds = query instanceof Array\n    let matches = []\n\n    for (let cached in cache) {\n      let instance = cache[cached].instance\n\n      if (isPropertiesQuery && !isArrayOfIds) {\n        let match = true\n\n        for (let property in query) {\n          if (instance[property] !== query[property]) {\n            match = false\n\n            break\n          }\n        }\n\n        if (match) {\n          matches.push(instance)\n        }\n      } else if (isArrayOfIds) {\n        for (let id of query) {\n          if (instance.id === id) {\n            matches.push(instance)\n\n            break\n          }\n        }\n      }\n    }\n\n    return matches\n  }\n\n  static cache() {\n    return cache\n  }\n\n  static preload(options) {\n    const modelName = this.prototype.modelName || this.prototype.constructor.name\n    const length = modelName.length\n\n    if (!options || options.localStorage) {\n      const count = localStorage.length\n\n      for (let i = 0; i < count; i++) {\n        let key = localStorage.key(i)\n\n        if (key.slice(0, length) === modelName) {\n          new this(JSON.parse(localStorage.getItem(key)))._cache()\n        }\n      }\n    }\n  }\n\n  // Private functions:\n  _cache() {\n    let cached = this._cached()\n    let now = new Date().toISOString()\n\n    if (!cached) {\n      cached = { created: now, frozen: false, instance: this }\n\n      cache[this._id()] = cached\n    } else {\n      cached.instance = this\n      cached.updated = now\n    }\n\n    return cached\n  }\n\n  _cached() {\n    return cache[this._id()]\n  }\n\n  _id() {\n    return (this.modelName || this.constructor.name) + '-' + this.id\n  }\n\n  // Public functions:\n  delete() {\n    let id = this._id()\n\n    delete cache[id]\n\n    if (persist) {\n      localStorage.removeItem(id)\n    }\n  }\n\n  freeze() {\n    this._cached().frozen = true\n  }\n\n  frozen() {\n    if (!this._cached()) {\n      return false\n    }\n\n    return this._cached().frozen\n  }\n\n  onupdate(callback) {\n    notify[this._id()].updates.push(callback)\n  }\n\n  save() {\n    this._cache()\n\n    if (persist) {\n      localStorage.setItem(this._id(), JSON.stringify(this))\n    }\n  }\n\n  thaw() {\n    this._cached().frozen = false\n  }\n}\n\n// Exports:\nexport { Model }\n","// Exports:\nexport { Model } from './model'\n"]}