{"version":3,"sources":["model.js","index.js"],"names":["Model","cache","persist","notify","setItem","removeItem","error","warn","data","configuration","id","Error","assign","constructor","prototype","modelName","name","Proxy","target","property","receiver","Reflect","get","value","updates","length","set","cached","_cached","now","Date","toISOString","instance","updated","created","_id","callback","push","_cache","JSON","stringify","query","instances","queryType","parse","localStorage","getItem","isPropertiesQuery","Object","isArrayOfIds","Array","matches","match","options","count","i","key","slice"],"mappings":"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","file":"index.map","sourceRoot":"../src/js","sourcesContent":["// Variables:\nlet cache = {}\nlet persist = true\nlet notify = {}\n\ntry {\n  localStorage.setItem('tdmnco-model-js', {})\n  localStorage.removeItem('tdmnco-model-js')\n} catch(error) {\n  console.warn('Model.js: localStorage not supported!', error)\n\n  persist = false\n}\n\n// Classes:\nclass Model {\n  constructor(data, configuration) {\n    if (!data.id) {\n      throw new Error('Model.js: cannot create instance without an id!')\n    }\n\n    Object.assign(this, data)\n\n    let id = (this.constructor.prototype.modelName || this.constructor.name) + '-' + this.id\n\n    notify[id] = {\n      updates: []\n    }\n\n    return new Proxy(this, {\n      get(target, property, receiver) {\n\t\t\t\treturn Reflect.get(target, property, receiver);\n  \t\t},\n\n      set(target, property, value) {\n        let updates = notify[id].updates\n\n        if (updates.length) {\n          for (let update of updates) {\n            update(property, target[property], value)\n          }\n        }\n\n        Reflect.set(target, property, value)\n\n        return true\n      }\n    })\n  }\n\n  // Static functions:\n  static first(query) {\n    return this.get(query)[0]\n  }\n\n  static get(query) {\n    if (!query) {\n      let instances = []\n\n      for (let id in cache) {\n        instances.push(cache[id].instance)\n      }\n\n      return instances\n    }\n\n    let queryType = typeof query\n\n    if (queryType === 'string') {\n      let id = (this.prototype.modelName || this.prototype.constructor.name) + '-' + query\n      let cached = cache[id]\n\n      if (!cached && persist) {\n        return new this(JSON.parse(localStorage.getItem(id)))\n      }\n\n      return cached.instance\n    }\n\n    let isPropertiesQuery = query instanceof Object\n    let isArrayOfIds = query instanceof Array\n    let matches = []\n\n    for (let cached in cache) {\n      let instance = cache[cached].instance\n\n      if (isPropertiesQuery && !isArrayOfIds) {\n        let match = true\n\n        for (let property in query) {\n          if (instance[property] !== query[property]) {\n            match = false\n\n            break\n          }\n        }\n\n        if (match) {\n          matches.push(instance)\n        }\n      } else if (isArrayOfIds) {\n        for (let id of query) {\n          if (instance.id === id) {\n            matches.push(instance)\n\n            break\n          }\n        }\n      }\n    }\n\n    return matches\n  }\n\n  static cache() {\n    return cache\n  }\n\n  static preload(options) {\n    const modelName = this.prototype.modelName || this.prototype.constructor.name\n    const length = modelName.length\n\n    if (!options || options.localStorage) {\n      const count = localStorage.length\n\n      let instances = []\n\n      for (let i = 0; i < count; i++) {\n        let key = localStorage.key(i)\n\n        if (key.slice(0, length) === modelName) {\n          new this(JSON.parse(localStorage.getItem(key)))._cache()\n        }\n      }\n    }\n  }\n\n  // Private functions:\n  _cache() {\n    let cached = this._cached()\n    let now = new Date().toISOString()\n\n    if (!cached) {\n      cached = { created: now, instance: this }\n\n      cache[this._id()] = cached\n    } else {\n      cached.instance = this\n      cached.updated = now\n    }\n\n    return cached\n  }\n\n  _cached() {\n    return cache[this._id()]\n  }\n\n  _id() {\n    return (this.modelName || this.constructor.name) + '-' + this.id\n  }\n\n  // Public functions:\n  onupdate(callback) {\n    notify[this._id()].updates.push(callback)\n  }\n\n  save() {\n    this._cache()\n\n    if (persist) {\n      localStorage.setItem(this._id(), JSON.stringify(this))\n    }\n  }\n}\n\n// Exports:\nexport { Model }\n","// Exports:\nexport { Model } from './model'\n"]}