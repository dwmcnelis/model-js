{"version":3,"sources":["model.js","index.js"],"names":["Model","cache","persist","notify","setItem","removeItem","error","warn","data","configuration","id","Error","assign","constructor","prototype","modelName","name","Proxy","target","property","receiver","Reflect","get","value","frozen","updates","length","set","cached","_cached","now","Date","toISOString","instance","updated","created","_id","callback","push","_cache","JSON","stringify","query","instances","queryType","stored","parse","localStorage","getItem","isPropertiesQuery","Object","isArrayOfIds","Array","matches","match","options","count","i","key","slice"],"mappings":";AAqNSA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,IAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,GAAAA,EAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,OAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCApNT,IAAIC,EAAQ,GACRC,GAAU,EACVC,EAAS,GAEb,IACeC,aAAAA,QAAQ,kBAAmB,IAC3BC,aAAAA,WAAW,mBACxB,MAAMC,GACEC,QAAAA,KAAK,wCAAyCD,GAE5C,GAAA,EAINN,IAAAA,EAAAA,WACQQ,SAAAA,EAAAA,EAAMC,GACZ,GAD2B,EAAA,KAAA,IAC1BD,EAAKE,GACF,MAAA,IAAIC,MAAM,mDAGXC,OAAAA,OAAO,KAAMJ,GAEhBE,IAAAA,GAAM,KAAKG,YAAYC,UAAUC,WAAa,KAAKF,YAAYG,MAAQ,IAAM,KAAKN,GAM/E,OAJAA,EAAAA,GAAM,CACF,QAAA,IAGJ,IAAIO,MAAM,KAAM,CAAA,IACjBC,SAAAA,EAAQC,EAAUC,GACjBC,OAAAA,QAAQC,IAAIJ,EAAQC,EAAUC,IAFd,IAKjBF,SAAAA,EAAQC,EAAUI,GAChB,IAACL,EAAOM,SAAU,CAChBC,IAAAA,EAAUtB,EAAOO,GAAIe,QAErBA,GAAAA,EAAQC,OAAQ,CAAA,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IACCD,IAAAA,IAAS,EAATA,EAAAA,EAAS,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,EACnBN,EADmB,EAAA,OACnBA,EAAUD,EAAOC,GAAWI,IAFnB,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,KAAA,GAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,IAMZI,QAAAA,IAAIT,EAAQC,EAAUI,GAGzB,OAAA,KAsKNvB,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAjEE,MAAA,WACH4B,IAAAA,EAAS,KAAKC,UACdC,GAAM,IAAIC,MAAOC,cAWdJ,OATFA,GAKIK,EAAAA,SAAW,KACXC,EAAAA,QAAUJ,IALR,EAAA,CAAEK,QAASL,EAAKN,QAAQ,EAAOS,SAAU,MAE5C,EAAA,KAAKG,OAASR,GAMfA,IAoDF5B,CAAAA,IAAAA,UAjDG,MAAA,WACDC,OAAAA,EAAM,KAAKmC,SAgDbpC,CAAAA,IAAAA,MA7CD,MAAA,WACG,OAAC,KAAKe,WAAa,KAAKF,YAAYG,MAAQ,IAAM,KAAKN,KA4CzDV,CAAAA,IAAAA,SAxCE,MAAA,WACHU,IAAAA,EAAK,KAAK0B,aAEPnC,EAAMS,GAETR,GACWG,aAAAA,WAAWK,KAkCrBV,CAAAA,IAAAA,SA9BE,MAAA,WACF6B,KAAAA,UAAUL,QAAS,IA6BnBxB,CAAAA,IAAAA,SA1BE,MAAA,WACH,QAAC,KAAK6B,WAIH,KAAKA,UAAUL,SAqBjBxB,CAAAA,IAAAA,WAlBEqC,MAAAA,SAAAA,GACA,EAAA,KAAKD,OAAOX,QAAQa,KAAKD,KAiB3BrC,CAAAA,IAAAA,OAdA,MAAA,WACAuC,KAAAA,SAEDrC,GACWE,aAAAA,QAAQ,KAAKgC,MAAOI,KAAKC,UAAU,SAU7CzC,CAAAA,IAAAA,OANA,MAAA,WACA6B,KAAAA,UAAUL,QAAS,KAKnBxB,CAAAA,CAAAA,IAAAA,QAhKM0C,MAAAA,SAAAA,GACJ,OAAA,KAAKpB,IAAIoB,GAAO,KA+JlB1C,CAAAA,IAAAA,MA5JI0C,MAAAA,SAAAA,GACL,IAACA,EAAO,CACNC,IAAAA,EAAY,GAEX,IAAA,IAAIjC,KAAMT,EACHqC,EAAAA,KAAKrC,EAAMS,GAAIuB,UAGpBU,OAAAA,EAKLC,GAAc,iBAFKF,IAAAA,EAAAA,YAAAA,EAAAA,IAEK,CACtBhC,IAAAA,GAAM,KAAKI,UAAUC,WAAa,KAAKD,UAAUD,YAAYG,MAAQ,IAAM0B,EAC3Ed,EAAS3B,EAAMS,GAEfkB,GAAAA,EACKA,OAAAA,EAAOK,SAGZ,IAACL,GAAU1B,EAAS,CAClB2C,IAAAA,EAASL,KAAKM,MAAMC,aAAaC,QAAQtC,IAEzCmC,GAAAA,GAAUA,EAAOnC,GACZ,OAAA,IAAI,KAAKmC,GAIb,OAAA,KAGLI,IAAAA,EAAoBP,aAAiBQ,OACrCC,EAAeT,aAAiBU,MAChCC,EAAU,GAET,IAAA,IAAIzB,KAAU3B,EAAO,CACpBgC,IAAAA,EAAWhC,EAAM2B,GAAQK,SAEzBgB,GAAAA,IAAsBE,EAAc,CAClCG,IAAAA,GAAQ,EAEP,IAAA,IAAInC,KAAYuB,EACfT,GAAAA,EAASd,KAAcuB,EAAMvB,GAAW,CAClC,GAAA,EAER,MAIAmC,GACMhB,EAAAA,KAAKL,QAEV,GAAIkB,EAAc,CAAA,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IACRT,IAAAA,IAAO,EAAPA,EAAAA,EAAO,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAbhC,IAAAA,EAAa,EAAA,MAChBuB,GAAAA,EAASvB,KAAOA,EAAI,CACd4B,EAAAA,KAAKL,GAEb,QALmB,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,KAAA,GAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAWpBoB,OAAAA,IA4FFrD,CAAAA,IAAAA,QAzFQ,MAAA,WACNC,OAAAA,IAwFFD,CAAAA,IAAAA,UArFQuD,MAAAA,SAAAA,GACPxC,IAAAA,EAAY,KAAKD,UAAUC,WAAa,KAAKD,UAAUD,YAAYG,KACnEU,EAASX,EAAUW,OAErB,IAAC6B,GAAWA,EAAQR,aAKjB,IAJCS,IAAAA,EAAQT,aAAarB,OAIlB+B,EAAI,EAAGA,EAAID,EAAOC,IAAK,CAC1BC,IAAAA,EAAMX,aAAaW,IAAID,GAEvBC,EAAIC,MAAM,EAAGjC,KAAYX,GACvB,IAAA,KAAKyB,KAAKM,MAAMC,aAAaC,QAAQU,KAAOnB,cAwEjDvC,EAtMHA,GAsMGA,QAAAA,MAAAA;;ACpNAA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,IAAAA,EAAAA,QAAAA,WAAAA,OAAAA,eAAAA,QAAAA,QAAAA,CAAAA,YAAAA,EAAAA,IAAAA,WAAAA,OAAAA,EAAAA","file":"index.map","sourceRoot":"../src/js","sourcesContent":["// Variables:\nlet cache = {}\nlet persist = true\nlet notify = {}\n\ntry {\n  localStorage.setItem('tdmnco-model-js', {})\n  localStorage.removeItem('tdmnco-model-js')\n} catch(error) {\n  console.warn('Model.js: localStorage not supported!', error)\n\n  persist = false\n}\n\n// Classes:\nclass Model {\n  constructor(data, configuration) {\n    if (!data.id) {\n      throw new Error('Model.js: cannot create instance without an id!')\n    }\n\n    Object.assign(this, data)\n\n    let id = (this.constructor.prototype.modelName || this.constructor.name) + '-' + this.id\n\n    notify[id] = {\n      updates: []\n    }\n\n    return new Proxy(this, {\n      get(target, property, receiver) {\n\t\t\t\treturn Reflect.get(target, property, receiver);\n  \t\t},\n\n      set(target, property, value) {\n        if (!target.frozen()) {\n          let updates = notify[id].updates\n\n          if (updates.length) {\n            for (let update of updates) {\n              update(property, target[property], value)\n            }\n          }\n\n          Reflect.set(target, property, value)\n        }\n\n        return true\n      }\n    })\n  }\n\n  // Static functions:\n  static first(query) {\n    return this.get(query)[0]\n  }\n\n  static get(query) {\n    if (!query) {\n      let instances = []\n\n      for (let id in cache) {\n        instances.push(cache[id].instance)\n      }\n\n      return instances\n    }\n\n    let queryType = typeof query\n\n    if (queryType === 'string') {\n      let id = (this.prototype.modelName || this.prototype.constructor.name) + '-' + query\n      let cached = cache[id]\n\n      if (cached) {\n        return cached.instance\n      }\n\n      if (!cached && persist) {\n        let stored = JSON.parse(localStorage.getItem(id))\n\n        if (stored && stored.id) {\n          return new this(stored)\n        }\n      }\n\n      return null\n    }\n\n    let isPropertiesQuery = query instanceof Object\n    let isArrayOfIds = query instanceof Array\n    let matches = []\n\n    for (let cached in cache) {\n      let instance = cache[cached].instance\n\n      if (isPropertiesQuery && !isArrayOfIds) {\n        let match = true\n\n        for (let property in query) {\n          if (instance[property] !== query[property]) {\n            match = false\n\n            break\n          }\n        }\n\n        if (match) {\n          matches.push(instance)\n        }\n      } else if (isArrayOfIds) {\n        for (let id of query) {\n          if (instance.id === id) {\n            matches.push(instance)\n\n            break\n          }\n        }\n      }\n    }\n\n    return matches\n  }\n\n  static cache() {\n    return cache\n  }\n\n  static preload(options) {\n    const modelName = this.prototype.modelName || this.prototype.constructor.name\n    const length = modelName.length\n\n    if (!options || options.localStorage) {\n      const count = localStorage.length\n\n      let instances = []\n\n      for (let i = 0; i < count; i++) {\n        let key = localStorage.key(i)\n\n        if (key.slice(0, length) === modelName) {\n          new this(JSON.parse(localStorage.getItem(key)))._cache()\n        }\n      }\n    }\n  }\n\n  // Private functions:\n  _cache() {\n    let cached = this._cached()\n    let now = new Date().toISOString()\n\n    if (!cached) {\n      cached = { created: now, frozen: false, instance: this }\n\n      cache[this._id()] = cached\n    } else {\n      cached.instance = this\n      cached.updated = now\n    }\n\n    return cached\n  }\n\n  _cached() {\n    return cache[this._id()]\n  }\n\n  _id() {\n    return (this.modelName || this.constructor.name) + '-' + this.id\n  }\n\n  // Public functions:\n  delete() {\n    let id = this._id()\n\n    delete cache[id]\n\n    if (persist) {\n      localStorage.removeItem(id)\n    }\n  }\n\n  freeze() {\n    this._cached().frozen = true\n  }\n\n  frozen() {\n    if (!this._cached()) {\n      return false\n    }\n\n    return this._cached().frozen\n  }\n\n  onupdate(callback) {\n    notify[this._id()].updates.push(callback)\n  }\n\n  save() {\n    this._cache()\n\n    if (persist) {\n      localStorage.setItem(this._id(), JSON.stringify(this))\n    }\n  }\n\n  thaw() {\n    this._cached().frozen = false\n  }\n}\n\n// Exports:\nexport { Model }\n","// Exports:\nexport { Model } from './model'\n"]}