{"version":3,"sources":["model.js","index.js"],"names":["cache","hooks","persist","localStorage","setItem","removeItem","error","console","warn","Model","data","id","Error","Object","assign","modelName","constructor","prototype","name","updates","Proxy","get","target","property","receiver","Reflect","set","value","frozen","length","update","cached","_cached","now","Date","toISOString","instance","updated","created","_modelName","_id","callback","push","_cache","JSON","stringify","query","_getById","Array","_getByIds","_getByProperties","_getInstances","options","count","i","key","slice","parse","getItem","stored","matches","modelCache","match"],"mappings":"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","file":"index.map","sourceRoot":"../src/js","sourcesContent":["// Variables:\nlet cache = {}\nlet hooks = {}\nlet persist = true\n\n// Test for localStorage support:\ntry {\n  localStorage.setItem('tdmnco-model-js', {})\n  localStorage.removeItem('tdmnco-model-js')\n} catch(error) {\n  console.warn('Model.js: localStorage not supported!', error)\n\n  persist = false\n}\n\n// Classes:\nclass Model {\n  constructor(data) {\n    if (!data.id) {\n      throw new Error('Model.js: cannot create instance without an id!')\n    }\n\n    Object.assign(this, data)\n\n    const modelName = this.constructor.prototype.modelName || this.constructor.name\n    const id = this.id\n\n    if (!cache[modelName]) {\n      cache[modelName] = {}\n    }\n\n    if (!hooks[modelName]) {\n      hooks[modelName] = {}\n    }\n\n    hooks[modelName][id] = {\n      updates: []\n    }\n\n    return new Proxy(this, {\n      get(target, property, receiver) {\n\t\t\t\treturn Reflect.get(target, property, receiver);\n      },\n\n      set(target, property, value) {\n        if (!target.frozen()) {\n          let updates = hooks[modelName][id].updates\n\n          if (updates.length) {\n            for (let update of updates) {\n              update(property, target[property], value)\n            }\n          }\n\n          Reflect.set(target, property, value)\n        }\n\n        return true\n      }\n    })\n  }\n\n  // Static functions:\n  static cache() {\n    return cache[this._modelName()]\n  }\n\n  static deleteCache() {\n    cache[this._modelName()] = {}\n  }\n\n  static first(query) {\n    return this.get(query)[0]\n  }\n\n  static get(query) {\n    if (!query) {\n      return this._getInstances()\n    }\n\n    if (typeof query === 'string') {\n      return this._getById(query)\n    }\n\n    if (query instanceof Array) {\n      return this._getByIds(query)\n    }\n\n    if (query instanceof Object) {\n      return this._getByProperties(query)\n    }\n  }\n\n  static preload(options) {\n    const modelName = this._modelName()\n    const length = modelName.length\n\n    if (!options || options.localStorage) {\n      const count = localStorage.length\n\n      for (let i = 0; i < count; i++) {\n        let key = localStorage.key(i)\n\n        if (key.slice(0, length) === modelName) {\n          new this(JSON.parse(localStorage.getItem(key)))._cache()\n        }\n      }\n    }\n  }\n\n  // Private static functions:\n  static _getById(query) {\n    const modelName = this._modelName()\n    const cached = cache[modelName][query]\n\n    if (cached) {\n      return cached.instance\n    }\n\n    if (persist) {\n      const stored = JSON.parse(localStorage.getItem(modelName + '-' + query))\n\n      if (stored && stored.id) {\n        return new this(stored)\n      }\n    }\n\n    return null\n  }\n\n  static _getByIds(query) {\n    const modelName = this._modelName()\n\n    let matches = []\n\n    for (let id in cache[modelName]) {\n      const instance = cache[modelName][id].instance\n\n      for (let id of query) {\n        if (instance.id === id) {\n          matches.push(instance)\n\n          break\n        }\n      }\n    }\n\n    return matches\n  }\n\n  static _getByProperties(query) {\n    const modelCache = cache[this._modelName()]\n\n    let matches = []\n\n    for (let id in modelCache) {\n      const instance = modelCache[id].instance\n      \n      let match = true\n\n      for (let property in query) {\n        if (instance[property] !== query[property]) {\n          match = false\n\n          break\n        }\n      }\n\n      if (match) {\n        matches.push(instance)\n      }\n    }\n\n    return matches\n  }\n\n  static _getInstances() {\n    const modelCache = cache[this._modelName()]\n\n    let matches = []\n    \n    for (let id in modelCache) {\n      matches.push(modelCache[id].instance)\n    }\n\n    return matches\n  }\n\n  static _modelName() {\n    return this.prototype.modelName || this.prototype.constructor.name\n  }\n\n  // Private functions:\n  _cache() {\n    let cached = this._cached()\n    let now = new Date().toISOString()\n\n    if (!cached) {\n      cached = { created: now, frozen: false, instance: this }\n\n      cache[this._modelName()][this.id] = cached\n    } else {\n      cached.instance = this\n      cached.updated = now\n    }\n\n    return cached\n  }\n\n  _cached() {\n    return cache[this._modelName()][this.id]\n  }\n\n  _id() {\n    return this._modelName() + '-' + this.id\n  }\n\n  _modelName() {\n    return this.constructor.prototype.modelName || this.constructor.name\n  }\n\n  // Public functions:\n  delete() {\n    const id = this.id\n    const modelName = this._modelName()\n\n    delete cache[modelName][id]\n    delete hooks[modelName][id]\n\n    if (persist) {\n      localStorage.removeItem(this._id())\n    }\n  }\n\n  freeze() {\n    this._cached().frozen = true\n  }\n\n  frozen() {\n    if (!this._cached()) {\n      return false\n    }\n\n    return this._cached().frozen\n  }\n\n  onupdate(callback) {\n    hooks[this._modelName()][this.id].updates.push(callback)\n  }\n\n  save() {\n    this._cache()\n\n    if (persist) {\n      localStorage.setItem(this._id(), JSON.stringify(this))\n    }\n  }\n\n  thaw() {\n    this._cached().frozen = false\n  }\n}\n\n// Exports:\nexport { Model }\n","// Exports:\nexport { Model } from './model'\n"]}