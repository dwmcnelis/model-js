{"version":3,"sources":["cache.js","hooks.js","model.js","persist.js","index.js"],"names":["cache","hooks","Model","data","id","Error","Object","assign","modelName","constructor","prototype","name","onbeforedelete","onbeforeupdate","Proxy","get","target","property","receiver","Reflect","set","value","callback","now","Date","toISOString","cached","_cached","instance","updated","created","_modelName","type","push","onbeforedeletes","length","persist","localStorage","removeItem","_id","_hook","_cache","setItem","JSON","stringify","query","_getById","Array","_getByIds","_getByProperties","_getInstances","options","count","i","key","slice","parse","getItem","stored","matches","modelCache","match","error","console","warn"],"mappings":"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","file":"model.js","sourceRoot":"../src/js","sourcesContent":["// Exports:\nexport const cache = {}","// Exports:\nexport const hooks = {}","// Imports:\nimport { cache, hooks, persist } from '.'\n\n// Classes:\nclass Model {\n\n  // Constructor:\n  constructor(data) {\n    if (!data.id) {\n      throw new Error('Model.js: cannot create instance without an id!')\n    }\n\n    Object.assign(this, data)\n\n    const modelName = this.constructor.prototype.modelName || this.constructor.name\n    const id = this.id\n\n    if (!cache[modelName]) {\n      cache[modelName] = {}\n    }\n\n    if (!hooks[modelName]) {\n      hooks[modelName] = {}\n    }\n\n    hooks[modelName][id] = {\n      onbeforedelete: [],\n      onbeforeupdate: []\n    }\n\n    return new Proxy(this, {\n      get(target, property, receiver) {\n\t\t\t\treturn Reflect.get(target, property, receiver)\n      },\n\n      set(target, property, value) {\n        for (let callback of hooks[modelName][id].onbeforeupdate) {\n          callback(property, target[property], value)\n        }\n\n        Reflect.set(target, property, value)\n\n        return true\n      }\n    })\n  }\n\n  // Static functions:\n  static cache() {\n    return cache[this._modelName()]\n  }\n\n  static deleteCache() {\n    cache[this._modelName()] = {}\n  }\n\n  static first(query) {\n    return this.get(query)[0]\n  }\n\n  static get(query) {\n    if (!query) {\n      return this._getInstances()\n    }\n\n    if (typeof query === 'string') {\n      return this._getById(query)\n    }\n\n    if (query instanceof Array) {\n      return this._getByIds(query)\n    }\n\n    if (query instanceof Object) {\n      return this._getByProperties(query)\n    }\n  }\n\n  static preload(options) {\n    const modelName = this._modelName()\n    const length = modelName.length\n\n    if (!options || options.localStorage) {\n      const count = localStorage.length\n\n      for (let i = 0; i < count; i++) {\n        let key = localStorage.key(i)\n\n        if (key.slice(0, length) === modelName) {\n          new this(JSON.parse(localStorage.getItem(key)))._cache()\n        }\n      }\n    }\n  }\n\n  // Private static functions:\n  static _getById(query) {\n    const modelName = this._modelName()\n    const cached = cache[modelName][query]\n\n    if (cached) {\n      return cached.instance\n    }\n\n    if (persist) {\n      const stored = JSON.parse(localStorage.getItem(modelName + '-' + query))\n\n      if (stored && stored.id) {\n        return new this(stored)\n      }\n    }\n\n    return null\n  }\n\n  static _getByIds(query) {\n    const matches = []\n    const modelName = this._modelName()\n\n    for (let id in cache[modelName]) {\n      const instance = cache[modelName][id].instance\n\n      for (let id of query) {\n        if (instance.id === id) {\n          matches.push(instance)\n\n          break\n        }\n      }\n    }\n\n    return matches\n  }\n\n  static _getByProperties(query) {\n    const matches = []\n    const modelCache = cache[this._modelName()]\n\n    for (let id in modelCache) {\n      const instance = modelCache[id].instance\n      \n      let match = true\n\n      for (let property in query) {\n        if (instance[property] !== query[property]) {\n          match = false\n\n          break\n        }\n      }\n\n      if (match) {\n        matches.push(instance)\n      }\n    }\n\n    return matches\n  }\n\n  static _getInstances() {\n    const matches = []\n    const modelCache = cache[this._modelName()]\n    \n    for (let id in modelCache) {\n      matches.push(modelCache[id].instance)\n    }\n\n    return matches\n  }\n\n  static _modelName() {\n    return this.prototype.modelName || this.prototype.constructor.name\n  }\n\n  // Private functions:\n  _cache() {\n    const now = new Date().toISOString()\n\n    let cached = this._cached()\n\n    if (!cached) {\n      cached = { created: now, instance: this }\n\n      cache[this._modelName()][this.id] = cached\n    } else {\n      cached.instance = this\n      cached.updated = now\n    }\n\n    return cached\n  }\n\n  _cached() {\n    return cache[this._modelName()][this.id]\n  }\n\n  _hook(type, callback) {\n    hooks[this._modelName()][this.id][type].push(callback)\n  }\n\n  _id() {\n    return this._modelName() + '-' + this.id\n  }\n\n  _modelName() {\n    return this.constructor.prototype.modelName || this.constructor.name\n  }\n\n  // Public functions:\n  delete() {\n    const id = this.id\n    const modelName = this._modelName()\n    const onbeforedeletes = hooks[modelName][id].onbeforedelete\n\n    if (onbeforedeletes.length) {\n      for (let callback of onbeforedeletes) {\n        callback()\n      }\n    }\n\n    delete cache[modelName][id]\n    delete hooks[modelName][id]\n\n    if (persist) {\n      localStorage.removeItem(this._id())\n    }\n  }\n\n  onbeforedelete(callback) {\n    this._hook('onbeforedelete', callback)\n  }\n\n  onbeforeupdate(callback) {\n    this._hook('onbeforeupdate', callback)\n  }\n\n  save() {\n    this._cache()\n\n    if (persist) {\n      localStorage.setItem(this._id(), JSON.stringify(this))\n    }\n  }\n}\n\n// Exports:\nexport { Model }\n","// Variables:\nlet persist = true\n\ntry {\n  localStorage.setItem('tdmnco-model-js', {})\n  localStorage.removeItem('tdmnco-model-js')\n} catch(error) {\n  console.warn('Model.js: localStorage not supported!', error)\n\n  persist = false\n}\n\n// Exports:\nexport default persist","// Exports:\nexport { cache } from './cache'\nexport { hooks } from './hooks'\nexport { Model } from './model'\nexport { persist } from './persist'"]}