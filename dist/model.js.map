{"version":3,"sources":["model.js","index.js"],"names":["cache","hooks","persist","localStorage","setItem","removeItem","error","console","warn","Model","data","id","Error","Object","assign","modelName","constructor","prototype","name","onbeforedelete","onbeforeupdate","Proxy","get","target","property","receiver","Reflect","set","value","onbeforeupdates","length","callback","now","Date","toISOString","cached","_cached","instance","updated","created","_modelName","type","push","onbeforedeletes","_id","_hook","_cache","JSON","stringify","query","_getById","Array","_getByIds","_getByProperties","_getInstances","options","count","i","key","slice","parse","getItem","stored","matches","modelCache","match"],"mappings":"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","file":"model.js","sourceRoot":"../src/js","sourcesContent":["// Variables:\nlet cache = {}\nlet hooks = {}\nlet persist = true\n\n// Test for localStorage support:\ntry {\n  localStorage.setItem('tdmnco-model-js', {})\n  localStorage.removeItem('tdmnco-model-js')\n} catch(error) {\n  console.warn('Model.js: localStorage not supported!', error)\n\n  persist = false\n}\n\n// Classes:\nclass Model {\n  constructor(data) {\n    if (!data.id) {\n      throw new Error('Model.js: cannot create instance without an id!')\n    }\n\n    Object.assign(this, data)\n\n    const modelName = this.constructor.prototype.modelName || this.constructor.name\n    const id = this.id\n\n    if (!cache[modelName]) {\n      cache[modelName] = {}\n    }\n\n    if (!hooks[modelName]) {\n      hooks[modelName] = {}\n    }\n\n    hooks[modelName][id] = {\n      onbeforedelete: [],\n      onbeforeupdate: []\n    }\n\n    return new Proxy(this, {\n      get(target, property, receiver) {\n\t\t\t\treturn Reflect.get(target, property, receiver)\n      },\n\n      set(target, property, value) {\n        const onbeforeupdates = hooks[modelName][id].onbeforeupdate\n\n        if (onbeforeupdates.length) {\n          for (let callback of onbeforeupdates) {\n            callback(property, target[property], value)\n          }\n        }\n\n        Reflect.set(target, property, value)\n\n        return true\n      }\n    })\n  }\n\n  // Static functions:\n  static cache() {\n    return cache[this._modelName()]\n  }\n\n  static deleteCache() {\n    cache[this._modelName()] = {}\n  }\n\n  static first(query) {\n    return this.get(query)[0]\n  }\n\n  static get(query) {\n    if (!query) {\n      return this._getInstances()\n    }\n\n    if (typeof query === 'string') {\n      return this._getById(query)\n    }\n\n    if (query instanceof Array) {\n      return this._getByIds(query)\n    }\n\n    if (query instanceof Object) {\n      return this._getByProperties(query)\n    }\n  }\n\n  static preload(options) {\n    const modelName = this._modelName()\n    const length = modelName.length\n\n    if (!options || options.localStorage) {\n      const count = localStorage.length\n\n      for (let i = 0; i < count; i++) {\n        let key = localStorage.key(i)\n\n        if (key.slice(0, length) === modelName) {\n          new this(JSON.parse(localStorage.getItem(key)))._cache()\n        }\n      }\n    }\n  }\n\n  // Private static functions:\n  static _getById(query) {\n    const modelName = this._modelName()\n    const cached = cache[modelName][query]\n\n    if (cached) {\n      return cached.instance\n    }\n\n    if (persist) {\n      const stored = JSON.parse(localStorage.getItem(modelName + '-' + query))\n\n      if (stored && stored.id) {\n        return new this(stored)\n      }\n    }\n\n    return null\n  }\n\n  static _getByIds(query) {\n    const modelName = this._modelName()\n\n    let matches = []\n\n    for (let id in cache[modelName]) {\n      const instance = cache[modelName][id].instance\n\n      for (let id of query) {\n        if (instance.id === id) {\n          matches.push(instance)\n\n          break\n        }\n      }\n    }\n\n    return matches\n  }\n\n  static _getByProperties(query) {\n    const matches = []\n    const modelCache = cache[this._modelName()]\n\n    for (let id in modelCache) {\n      const instance = modelCache[id].instance\n      \n      let match = true\n\n      for (let property in query) {\n        if (instance[property] !== query[property]) {\n          match = false\n\n          break\n        }\n      }\n\n      if (match) {\n        matches.push(instance)\n      }\n    }\n\n    return matches\n  }\n\n  static _getInstances() {\n    const matches = []\n    const modelCache = cache[this._modelName()]\n    \n    for (let id in modelCache) {\n      matches.push(modelCache[id].instance)\n    }\n\n    return matches\n  }\n\n  static _modelName() {\n    return this.prototype.modelName || this.prototype.constructor.name\n  }\n\n  // Private functions:\n  _cache() {\n    const now = new Date().toISOString()\n\n    let cached = this._cached()\n\n    if (!cached) {\n      cached = { created: now, instance: this }\n\n      cache[this._modelName()][this.id] = cached\n    } else {\n      cached.instance = this\n      cached.updated = now\n    }\n\n    return cached\n  }\n\n  _cached() {\n    return cache[this._modelName()][this.id]\n  }\n\n  _hook(type, callback) {\n    hooks[this._modelName()][this.id][type].push(callback)\n  }\n\n  _id() {\n    return this._modelName() + '-' + this.id\n  }\n\n  _modelName() {\n    return this.constructor.prototype.modelName || this.constructor.name\n  }\n\n  // Public functions:\n  delete() {\n    const id = this.id\n    const modelName = this._modelName()\n    const onbeforedeletes = hooks[modelName][id].onbeforedelete\n\n    if (onbeforedeletes.length) {\n      for (let callback of onbeforedeletes) {\n        callback()\n      }\n    }\n\n    delete cache[modelName][id]\n    delete hooks[modelName][id]\n\n    if (persist) {\n      localStorage.removeItem(this._id())\n    }\n  }\n\n  onbeforedelete(callback) {\n    this._hook('onbeforedelete', callback)\n  }\n\n  onbeforeupdate(callback) {\n    this._hook('onbeforeupdate', callback)\n  }\n\n  save() {\n    this._cache()\n\n    if (persist) {\n      localStorage.setItem(this._id(), JSON.stringify(this))\n    }\n  }\n}\n\n// Exports:\nexport { Model }\n","// Exports:\nexport { Model } from './model'\n"]}